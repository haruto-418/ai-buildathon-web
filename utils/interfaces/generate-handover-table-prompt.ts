import { z } from "zod";

const generateHandoverTablePromptSchema = z.object({
  customersJson: z.string(),
  document: z.string(),
});
type GenerateHandoverTablePrompt = z.infer<
  typeof generateHandoverTablePromptSchema
>;
export function generateHandoverTablePrompt(args: GenerateHandoverTablePrompt) {
  const { customersJson, document } =
    generateHandoverTablePromptSchema.parse(args);

  const prompt = `
  # 命令
あなたは引き継ぎ業務の高度なコンサルタントです。前任者から後任者への業務の引き継ぎを100%の精度で遂行するために以下のタスクを行なってください。

# タスク
以下の文章を読み、文章内の解決策に書いてある各ステップを実行し、jsonを出力してください。

# 文章
"""
概要

営業部内の退職予定者から新人への引き継ぎにおける課題を解決します。

**解決すべき課題**

1. **情報の分散化**
   
  業務関連のメール、資料、メモなどが個人のデバイスやアカウントに散在しており、後任者が必要な情報に容易にアクセスできない。
   
2. **引き継ぎプロセスの非効率性**
   
  手動での情報整理や説明に多大な時間と労力がかかり、情報の抜け漏れが発生するリスクが高い。
   
3. **コミュニケーションギャップ**
   
  育休取得者の不在期間中に発生した問題や質問に対し、迅速な対応が困難で業務効率が低下する。
   

**解決策**

以下の手順で包括的かつ正確な引き継ぎ資料を自動生成します。

1. **基本情報の取得**
   
  このステップの出力は、もともと社内にある顧客情報jsonそのもの（60点）です。
   
  シンプルな例：課題・ニーズ：業務効率化を検討中
   
  詳しい例：このとき、jsonのカラムは以下の通りです。| 会社名 | 業種 | 所在地 | 電話番号 | メールアドレス | 担当者名 | 役職 | 取引状況 | 興味関心 | 課題・ニーズ | 過去の接触履歴 | 次回アクション | 契約開始日 | 契約終了日 | 年間取引額 | 競合情報 | 優先度 | メモ | 
   
2. **情報の整理とカラムの洗い出し**
   
  全ステップで作ったjsonに加えて、議事録という非構造化データを体系的に分類・整理し、情報を補足します。このとき、営業という職における属人生を排除し、サポートします。顧客の性格、社風、好みなどをヒアリングし、円滑なコミュニケーションのために注意すべき点を記録します。例えば、「担当者はバックエンドエンジニア3年の経験があるため技術的な詳細説明を好む」「稟議プロセスは部長・専務・社長それぞれの承認に1ヶ月ずつかかる」といった情報を追記します。個のステップでのアウトプットは以下のようになります。
   
  このステップの出力は、60点のjsonに、議事録にある情報を付け加えたjsonのカラム（80点）
   
  例：課題・ニーズの詳細：既存システムの老朽化によるメンテナンスコスト増加が課題
   
  追加する情報：顧客が抱える課題やニーズの背景、具体的な内容、緊急度が素人にも伝わるくらい具体的なストーリー。このとき、jsonのカラムは例として、次のように深いものであるべきです。しかしこれらのカラムそのものを含まなければならないという意味ではありません。60点の顧客情報カラムに加えて、**興味関心（詳細）| 課題・ニーズ（詳細）| 過去の接触履歴（詳細）| キーパーソン | 競合状況（詳細）| 関係性**
   
3. カラムの内容を埋め込む
   
  このステップの出力は、60点のjsonに、議事録にある情報を付け加えたjson（80点）
   

下の表は例に過ぎませんが、このくらい詳しい具体的な推論および言語化を必要とします。

| 新しいカラム名 | 説明 | 拡充ロジック |
| --- | --- | --- |
| **興味関心（詳細）** | 既存の「興味関心」カラムをより詳細化 | メール履歴や議事録から、顧客が具体的にどのような製品/サービスの機能、価格帯、導入時期などに興味を持っているかを抽出し、既存の「興味関心」カラムの内容を詳細化します。 例えば、「セキュリティ対策に興味あり」という既存の情報に対し、メールで具体的な製品名や機能について質問していた場合は、「XX社UTM製品の導入時期、価格、多要素認証機能に興味あり」のように拡充します。 |
| **課題・ニーズ（詳細）** | 既存の「課題・ニーズ」カラムをより詳細化 | 議事録やメール履歴から、顧客が抱える課題やニーズの背景、具体的な内容、緊急度などを抽出し、既存の「課題・ニーズ」カラムの内容を詳細化します。例えば、「業務効率化を検討中」という既存の情報に対し、議事録に「既存システムの老朽化によるメンテナンスコスト増加が課題」と記載されていれば、それを追記します。 |
| **過去の接触履歴（詳細）** | 既存の「過去の接触履歴」カラムをより詳細化 | 議事録から日付、接触方法（メール、電話、訪問）、議題、参加者、結果などを抽出し、時系列に沿って整理した詳細な接触履歴を生成します。例えば、「2024/1/15に接触」という情報に対し、「2024/1/15 電話にて製品Aのデモ実施について打診、後日メールにて日程調整の連絡をすることで合意」のように拡充します。ただし、同じような単語を繰り返すことを避け、最初から現在までの流れとしてわかりやすい回答を心がけています。 |
| **キーパーソン** | 顧客企業におけるキーパーソンの情報 | 議事録やメール履歴から、意思決定に関わるキーパーソン（氏名、役職、部署、性格、特徴など）を特定し、情報を追記します。既存の情報には担当者名しか記載されていない場合でも、CCに入っている人物や、議事録での発言内容からキーパーソンを特定し、情報を拡充します。 |
| **競合状況（詳細）** | 具体的な競合製品/サービス、顧客の評価 | メール履歴、議事録、メモから、顧客が比較検討している競合製品/サービス、それらに対する顧客の評価（メリット/デメリット）を抽出し、既存の「競合情報」を詳細化します。例えば、「A社が競合」という情報に対し、「A社製品Bは価格面で優位だが、機能面で劣ると顧客が評価」のように拡充します。 |
| **関係性** | 顧客との関係性の深さ | 過去の接触履歴（頻度、内容）、メールの文面、メモの内容などを分析し、顧客との関係性の深さ（最高のAから最低のDの4段階評価）を評価します。 |
"""

# データ
## 60点の顧客情報json
"""
${customersJson}
"""

## 議事録
"""
${document}
"""
`;

  return prompt;
}
